<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风风</title>
  <icon>https://www.gravatar.com/avatar/1e6a140385aa52e08727205a37edab7e</icon>
  <subtitle>心有猛虎，细嗅蔷薇</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-04T16:07:36.576Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>风风</name>
    <email>1594507422@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web应用项目开发笔记整理</title>
    <link href="http://example.com/posts/f4a556b8.html"/>
    <id>http://example.com/posts/f4a556b8.html</id>
    <published>2022-12-04T16:03:31.000Z</published>
    <updated>2022-12-04T16:07:36.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、异常处理"><a href="#一、异常处理" class="headerlink" title="一、异常处理"></a><strong>一、异常处理</strong></h2><h4 id="1-自定义异常类，根据对应的业务需求"><a href="#1-自定义异常类，根据对应的业务需求" class="headerlink" title="1.自定义异常类，根据对应的业务需求"></a>1.自定义异常类，根据对应的业务需求</h4><p>例：编写一个业务异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String errInfo;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String massge)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(massge);</span><br><span class="line">        errInfo = massge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义异常处理类"><a href="#2-定义异常处理类" class="headerlink" title="2.定义异常处理类"></a>2.定义异常处理类</h4><p>例：编写一个自定义异常处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//使用controllerAdvice注解拦截controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PraticesExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span><span class="comment">//使用ExcptionHandler注解说明这是一个异常类</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">notfundException</span><span class="params">(HttpServletRequest request, BusinessException e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errInfo</span> <span class="operator">=</span> <span class="string">&quot;业务异常&quot;</span>+e.getErrorInfo();</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;title&quot;</span>,errInfo);</span><br><span class="line">        mv.addObject(<span class="string">&quot;url&quot;</span>,request.getRequestURL().toString());</span><br><span class="line">        mv.addObject(<span class="string">&quot;exception&quot;</span>,e);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;error/error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-定义通用的异常处理方法"><a href="#3-定义通用的异常处理方法" class="headerlink" title="3.定义通用的异常处理方法"></a>3.定义通用的异常处理方法</h4><p>例：编写一个通用的异常处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">exception</span><span class="params">(HttpServletRequest request, Exception e)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span>(AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class)!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;非业务异常&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;url&quot;</span>,request.getRequestURL().toString());</span><br><span class="line">        mv.setViewName(<span class="string">&quot;error/error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-自定义错误页面"><a href="#4-自定义错误页面" class="headerlink" title="4.自定义错误页面"></a>4.自定义错误页面</h4><p>1.添加Thymlea依赖</p><p>2.完成相应的error页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="comment">&lt;!--error相应页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>出错啦<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;title&#125;&quot;</span>&gt;</span>出错了<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>对不起，服务器内部错误，请联系管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;&#x27;<span class="symbol">&amp;lt;</span>!--&#x27;&quot;</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;&#x27;错误的URL地址：&#x27;+$&#123;url&#125;&quot;</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;&#x27;错误的信息&#x27;+$&#123;exception.message&#125;&quot;</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;st:$&#123;exception.stackTrace&#125;&quot;</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;st&#125;&quot;</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;&#x27;--<span class="symbol">&amp;gt;</span>&#x27;&quot;</span> <span class="attr">th:remove</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-定义异常处理页面，输出json异常信息"><a href="#5-定义异常处理页面，输出json异常信息" class="headerlink" title="5.定义异常处理页面，输出json异常信息"></a>5.定义异常处理页面，输出json异常信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(annotations = RestController.class)</span><span class="comment">//使用RestControllerAdvice注解指定处理的类型为RestController，参数表示指定要处理的接口的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ExceptionWrapper</span> &#123;<span class="comment">//在内部定义一个类型ExceptionWrapper封装类专用于包装异常信息,该类只能用在ExceptionHandler中</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> StackTraceElement[] stackTrace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ExceptionWrapper</span><span class="params">(String desc, String message, StackTraceElement[] stackTrace)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.desc = desc;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.stackTrace = stackTrace;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//添加异常处理方法，同样使用ExceptionHandler注解，返回异常包装类对象</span></span><br><span class="line">    <span class="keyword">public</span> ExceptionWrapper <span class="title function_">handler</span><span class="params">(WebRequest request, Exception e)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ExceptionWrapper</span>(request.getDescription(<span class="literal">true</span>),e.getMessage(),e.getStackTrace());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、业务分析"><a href="#二、业务分析" class="headerlink" title="二、业务分析"></a>二、业务分析</h2><h4 id="1-绘制业务流程图"><a href="#1-绘制业务流程图" class="headerlink" title="1.绘制业务流程图"></a>1.绘制业务流程图</h4><h5 id="1-1什么是业务流程图"><a href="#1-1什么是业务流程图" class="headerlink" title="1.1什么是业务流程图"></a>1.1什么是业务流程图</h5><p>进行需求分析时，要明确某一业务，除了识别涉及的业务对象、业务对象各种职能外，还要分析业务的运转过程，<br>在实际业务信息化的过程中，分析当前存在的不合理的流程，帮助用户优化业务流</p><h5 id="1-2业务流程图的类型，规范"><a href="#1-2业务流程图的类型，规范" class="headerlink" title="1.2业务流程图的类型，规范"></a>1.2业务流程图的类型，规范</h5><p>类型：基本业务流程图、泳道图、活动图<br>规范：开始符号、结束符号、流程/活动、流程线、分支</p><h5 id="1-3确该项目的参与者"><a href="#1-3确该项目的参与者" class="headerlink" title="1.3确该项目的参与者"></a>1.3确该项目的参与者</h5><p>特别注意一般还会有一个匿名用户要考虑到</p><h5 id="1-4该项目的参与者各自流程-活动的名称，及相应的顺序"><a href="#1-4该项目的参与者各自流程-活动的名称，及相应的顺序" class="headerlink" title="1.4该项目的参与者各自流程/活动的名称，及相应的顺序"></a>1.4该项目的参与者各自流程/活动的名称，及相应的顺序</h5><p>比如登录系统、注册系统、查看用户等<br>要根据不同的参与者列出相应的活动过程</p><h5 id="1-5流程图规范和实例"><a href="#1-5流程图规范和实例" class="headerlink" title="1.5流程图规范和实例"></a>1.5流程图规范和实例</h5><p><img src="C:\Users\Mc1594507422\Desktop\学习\笔记学习整理\流程图.png" alt="流程图"></p><p><img src="C:\Users\Mc1594507422\Desktop\学习\笔记学习整理\流程图实例.png" alt="流程图实例"></p><h4 id="2-绘制用例图"><a href="#2-绘制用例图" class="headerlink" title="2.绘制用例图"></a>2.绘制用例图</h4><h5 id="2-1什么是用例图"><a href="#2-1什么是用例图" class="headerlink" title="2.1什么是用例图"></a>2.1什么是用例图</h5><p>用例图是表述用例、参与者以及它们之间关系的图，从用户的角度来描述对信息系统的功能需求，分析产品的功能和行为<br>通过用例图，可以明确整个系统的用户关系，用户有哪些，用户需要系统提供的服务有哪些，用户可以为系统提供什么服务<br>用例图的绘制流程一般为：识别参与者→识别用例→建立用例关系→编写用例描述</p><h5 id="2-2用例图的构成，规范"><a href="#2-2用例图的构成，规范" class="headerlink" title="2.2用例图的构成，规范"></a>2.2用例图的构成，规范</h5><p>参与者：角色，就是系统的用户，以人性符号表示<br>用例：用户希望系统提供的功能，用例名可以用动词+名词，千万不要用专业术语，符号为椭圆，在内部显示用例名<br>用例关系：描述参与者和用例之间的连接线，常见关系有有包含、扩展、泛化等</p><h5 id="2-3识别用例"><a href="#2-3识别用例" class="headerlink" title="2.3识别用例"></a>2.3识别用例</h5><p>找到系统中有哪些参与者<br>各参与者希望提供的功能<br>外部事件引发的系统需要做的事<br>定时自动操作</p><h5 id="2-4撰写用例描述"><a href="#2-4撰写用例描述" class="headerlink" title="2.4撰写用例描述"></a>2.4撰写用例描述</h5><p>用例图没有描述系统行为的细节，所以需要文字对其进行详细描述。主要包括<br>用例编号：最好能从编号识别出子系统、模块。<br>用例名称：即用例图中的名称<br>用例概述：描述用例的用途，包括执行用例的用户、执行可该用例起到了什么作用<br>前置条件：本用例必须满足的条件。如要求另一个用例已经执行或用户有运行本用例权限。并非每个用例都有前置条件<br>基本事件流：从用户角度描述执行本用例的具体步骤<br>扩展事件流：可执行也可不执行的事件，比如加入购物车，可以先登录，也可以不登录匿名加入<br>后置条件：用例执行完成之后，可能的结果，比如登录系统，后置条件就是登录成功进入系统或登录失败提示错误<br>优先级：用例的优先次序，如果是被依赖的用例，其优先级则高于依赖它的用例</p><h5 id="2-5分析用例关系"><a href="#2-5分析用例关系" class="headerlink" title="2.5分析用例关系"></a>2.5分析用例关系</h5><p>泛化关系:参与者之间的关系基本是泛化关系（一般与特殊），以空心箭头表示；参与者与用例之间基本就是关联关系，一般用单箭头表示<br>包含关系：一个用例的行为包含了另一个用例，要完成此用例则必须执行所包含的用例。包含关系使用虚线箭头表示，箭头指向被包含的子用例，线上标注 &lt;<include>&gt;<br>扩展关系：一个用例本来是完整的用例，即使没有扩展用例的参与，业务也是完整的，只有在特定情况下扩展用例才执行。扩展关系同样使用虚线箭头表示，箭头指向基本用例，线上标注&lt;<extend>&gt;</p><h5 id="2-6用例图规范和示例"><a href="#2-6用例图规范和示例" class="headerlink" title="2.6用例图规范和示例"></a>2.6用例图规范和示例</h5><p><img src="C:\Users\Mc1594507422\Desktop\学习\笔记学习整理\用例图.png" alt="用例图"></p><p><img src="C:\Users\Mc1594507422\Desktop\学习\笔记学习整理\用例图实例.png" alt="用例图实例"></p><h2 id="三、实体类"><a href="#三、实体类" class="headerlink" title="三、实体类"></a>三、实体类</h2><h5 id="1-添加entities文件夹，创建实体类的基类（父类）BaseEntity"><a href="#1-添加entities文件夹，创建实体类的基类（父类）BaseEntity" class="headerlink" title="1.添加entities文件夹，创建实体类的基类（父类）BaseEntity"></a>1.添加<strong>entities</strong>文件夹，创建实体类的基类（父类）<strong>BaseEntity</strong></h5><ul><li>使用<strong>UUID</strong>类型的<strong>id</strong> （UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准。其目的，是让<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336?fromModule=lemma_inlink">分布式系统</a>中的所有元素，都能有唯一的辨识信息。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728?fromModule=lemma_inlink">数据库</a>创建时的名称重复问题。）</li><li>id的无参构造器</li><li>使用<strong>getter</strong>和<strong>setter</strong>注解，添加setter是因为要在前端传id到后端的时候需要set方法，否则会得不到正确的id</li><li>使用**@MappedSuperclass<strong>注解类，这是</strong>JPA**的注解，用于父类</li><li>使用@Id注解id，表示该字段映射的列为主键</li><li>使用**@GeneratedValue(generator = ‘uuid2’)<strong>注解id，表示</strong>id<strong>使用uuid2类型作为生成器来自动生成</strong>id<strong>的值，</strong>uuid**已经弃用</li><li>使用**@GenericGenerator(name = “uuid2”,strategy = “uuid2”)<strong>来注解</strong>id<strong>，指定</strong>UUID**的生成策略，与上一个注解搭配使用（如果是自定义生成策略的话）</li><li>使用**@Column(columnDefinition = “BINARY(16)”)<strong>注解</strong>id<strong>，指定数据库对应的列类型为</strong>binary(16)<strong>，与</strong>varchar<strong>相比</strong>binary**可以减少该列存储的值的体积</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//lombok无参构造器注解</span></span><br><span class="line"><span class="meta">@Data</span><span class="comment">//lombok注解</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  <span class="doctag">@MappedSuperclass</span></span></span><br><span class="line"><span class="comment">  JPA注解，用于实体类的父类，被标注的父类不是完整的实体类，</span></span><br><span class="line"><span class="comment"> 不会映射到数据库，而是把其属性映射到子类的数据库列。</span></span><br><span class="line"><span class="comment">  因此被标注的类不能再标注<span class="doctag">@Entity</span>或<span class="doctag">@Table</span></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//指定为主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = &quot;uuid2&quot;)</span><span class="comment">//指定自定义生成策略，如果是自定义生成策略需要搭配GenericGenerator注解一起使用,jpa自带的生成策略则不用</span></span><br><span class="line">    <span class="meta">@GenericGenerator(name = &quot;uuid2&quot;,strategy = &quot;uuid2&quot;)</span></span><br><span class="line">    <span class="meta">@Column(columnDefinition = &quot;BINARY(16)&quot;)</span><span class="comment">//指定列的类型</span></span><br><span class="line">    <span class="keyword">protected</span> UUID id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-在文件夹中添加User类"><a href="#2-在文件夹中添加User类" class="headerlink" title="2.在文件夹中添加User类"></a>2.在文件夹中添加User类</h5><ul><li><p>继承<strong>BaseEntity</strong>类</p></li><li><p>使用**@Entity<strong>注解</strong>User<strong>类，标记该类为实体类。还可以通过</strong>@Table**注解指定表名</p></li><li><p>输入相应的业务对象模型(实体类字段)</p></li><li><p>使用**@Temporal(TemporalType.TIMESTAMP)<strong>注解</strong>Date**类型字段，从数据库获取带有日期和时间的值，若为Date则只显示日期不显示时间，若为TIME则只显示时间不显示日期</p></li><li><p>生成每个字段的<strong>getter</strong>和<strong>setter</strong>（字段多推荐使用lombok的注解）</p></li><li><p>添加无参构造器，为相应的字段赋初始值</p></li><li><p>添加整数常量-1/0/1/2,代表4种不同的身份：禁止访问，管理员，教师，学生。使用**@Transient**注解，表示映射时忽略</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span><span class="comment">//表示这是一个实体类</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line">    <span class="meta">@Transient</span><span class="comment">//表示映射时忽略该字段，常量对象表示四种不同身份</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TYPE_BANNED</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//封禁用户</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TYPE_ADMIN</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//管理员</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TYPE_TEACHER</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//教师</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TYPE_STUDENT</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//学生</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> applyTeacher;</span><br><span class="line">    <span class="meta">@Temporal(TemporalType.TIMESTAMP)</span></span><br><span class="line">    <span class="comment">//从数据库获取时间和日期的值，用于Date类型上，Date表示只带日期不带时间</span></span><br><span class="line">    <span class="comment">// time表示只带时间不带日期，timestamp表示时间戳</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@Temporal(TemporalType.TIMESTAMP)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;teacher&quot;)</span><span class="comment">//一个教师对应多个课程，一对多的关系，第一个one表示当前user对象，第二个many表示course</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; course = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//初始化集合对象防止问题</span></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;students&quot;)</span><span class="comment">//对于主次关系，写在mappedby里面的一方为次，另一方为主</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; enrolledCourses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private List&lt;Result&gt; results;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时就为时间对象赋初值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        createTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        updateTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonManagedReference</span><span class="comment">//使用该注解时表示只序列化该对象，通常用于多的一方，解决json序列化无限递归的问题，用在get上</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Course&gt; <span class="title function_">getCourse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Course&gt; <span class="title function_">getEnrolledCourses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enrolledCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-在文件夹中添加Course类"><a href="#3-在文件夹中添加Course类" class="headerlink" title="3.在文件夹中添加Course类"></a>3.在文件夹中添加Course类</h5><ul><li>继承<strong>BaseEntity</strong></li><li>使用**@Entity<strong>注解</strong>Course**类</li><li>输入相应的业务对象模型(实体类字段)</li><li>生成每个字段的<strong>getter</strong>和<strong>setter</strong>（字段多推荐使用lombok的注解）</li><li>添加无参构造器，为相应的字段赋初始值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line"><span class="keyword">private</span> String cover;</span><br><span class="line"><span class="meta">@ManyToOne</span><span class="comment">//表示多个课程对应一名教师</span></span><br><span class="line"><span class="keyword">private</span> User teacher;</span><br><span class="line"><span class="meta">@Temporal(TemporalType.TIMESTAMP)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@Temporal(TemporalType.TIMESTAMP)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> isOpen;</span><br><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//private List&lt;Chapter&gt; chapters;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Course</span><span class="params">()</span> &#123;</span><br><span class="line">        createTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        updateTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonBackReference</span><span class="comment">//使用该注解时序列化会忽略，用于少的一方，不用用于集合、数组等</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-完成User类和Course类的一对多实体关系-教师和课程关联"><a href="#4-完成User类和Course类的一对多实体关系-教师和课程关联" class="headerlink" title="4.完成User类和Course类的一对多实体关系(教师和课程关联)"></a>4.完成User类和Course类的一对多实体关系(教师和课程关联)</h5><ul><li><p>在<strong>Course</strong>类中添加一个User类型的字段<strong>teacher</strong>，并使用**@ManyToOne**注解，表示多个课程对应一名教师</p></li><li><p>在<strong>User</strong>类中添加一个<strong>List<Course><strong>类型字段</strong>courses</strong>，并使用**@OneToMany(mappedBy = “teacher”)<strong>注解，表示一名教师可对应多个课程，每个课程对象使用teacher字段关联</strong>User(**教师)表</p></li><li><p>对于主次关系，写有<strong>mappeBy</strong>的一方为次，另一方为主，只有在主动方关联对象才会被保存到数据库</p></li><li><p>分别在两个类中生成对应的<strong>getter</strong>和<strong>setter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Course类</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@ManyToOne</span><span class="comment">//表示多个课程对应一名教师</span></span><br><span class="line"><span class="keyword">private</span> User teacher;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">User类</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@OneToMany(mappedBy = &quot;teacher&quot;)</span><span class="comment">//一个教师对应多个课程，一对多的关系，第一个one表示当前user对象，第二个many表示course</span></span><br><span class="line"> <span class="keyword">private</span> List&lt;Course&gt; course = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//初始化集合对象防止问题</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>解决实体类之间互相引用导致的json序列化无限递归问题</strong></p><p>  <strong>json</strong>序列化时，关联的字段会造成无限递归，对于1:n的关系，在1方（<strong>teacher</strong>）的<strong>getter</strong>上设置</p><p><strong>@JsonBackReference</strong>注解，同时在n方（<strong>courses</strong>）字段的<strong>getter</strong>上设置**@JsonManagedReference**注解</p><p>对于n:n的关系，在两方的<strong>getter</strong>上设置**@JsonIgnore**即可</p><p>也可以直接加在字段上，则对序列化和反序列化都起作用，加在<strong>getter</strong>上对序列化起作用</p><p><strong>@JsonBackReference&amp;@JsonManagedReference&amp;@JsonIgnore</strong><br>在序列化的时候，**@JsonManagedReference** 注解的属性则会被序列化，**@JsonBackReference** 的注解将会被忽略<br><strong>@JsonBackReference</strong> 注解，通常说明这个字段是关联的一个双向引用字段，这个字段在这个双向引用的角色是 “孩子”。这个字段的值只能是对象（Bean），不能是集合、图、数组等<br><strong>@JsonManagedReference</strong> 注解，通常说明这个字段是一个双向引用的字段，这个字段在这个双向引用中的角色为 “父”，与这个字段对应的引用需要注解为 <strong>@JsonBackReference</strong></p></blockquote></li></ul><h5 id="5-解决两者（教师和课程）之间json序列化无限递归的问题"><a href="#5-解决两者（教师和课程）之间json序列化无限递归的问题" class="headerlink" title="5.解决两者（教师和课程）之间json序列化无限递归的问题"></a>5.解决两者（教师和课程）之间json序列化无限递归的问题</h5><ul><li>为<strong>User</strong>类的关系字段<strong>courses</strong>的<strong>getter</strong>添加**@JsonManagedReference**注解，该注解用于父级角色</li><li>在<strong>Course</strong>类<strong>teacher</strong>字段的getter上添加**@JsonBackReference**注解，该注解用于子级，且不能注解集合类型</li><li><strong>@JsonBackReference</strong>注解的字段会被序列化而**@JsonBackReference**注解的字段会被忽略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonManagedReference</span><span class="comment">//使用该注解时表示只序列化该对象，通常用于多的一方，解决json序列化无限递归的问题，用在get上</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Course&gt; <span class="title function_">getCourse</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> course;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonBackReference</span><span class="comment">//使用该注解时序列化会忽略，用于少的一方，不用于集合、数组等</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">getTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> teacher;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="6-完成User类和Course类的多对多实体关系（学生和课程关联）"><a href="#6-完成User类和Course类的多对多实体关系（学生和课程关联）" class="headerlink" title="6.完成User类和Course类的多对多实体关系（学生和课程关联）"></a>6.完成User类和Course类的多对多实体关系（学生和课程关联）</h5><ul><li>在<strong>Course</strong>类中添加一个<strong>List<User><strong>类型的字段</strong>students</strong>，并使用**@ManyToMany**注解，课程可以注册多名学生</li><li>在<strong>User</strong>类中添加一个<strong>List<Course><strong>类型字段</strong>enrolledCourses</strong>，并使用**@ManyToMany(mappedBy = “students”<strong>)注解，表示学生可以学习多门课程，并设置</strong>Course<strong>表的</strong>students**关联</li><li>分别在两个表生成对应的<strong>getter</strong>和<strong>setter</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany(mappedBy = &quot;students&quot;)</span><span class="comment">//对于主次关系，写在mappedby里面的一方为次，另一方为主</span></span><br><span class="line"> <span class="keyword">private</span> List&lt;Course&gt; enrolledCourses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h5 id="7-解决两者（学生和课程）之间json序列化无限递归的问题"><a href="#7-解决两者（学生和课程）之间json序列化无限递归的问题" class="headerlink" title="7.解决两者（学生和课程）之间json序列化无限递归的问题"></a>7.解决两者（学生和课程）之间json序列化无限递归的问题</h5><ul><li>为<strong>User</strong>类的关系字段<strong>enrolledCourses</strong>的<strong>getter</strong>添加**@JsonIgnore**注解</li><li>为<strong>Course</strong>类关系字段<strong>students</strong>的<strong>getter</strong>添加**@JsonIgnore**</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Course&gt; <span class="title function_">getEnrolledCourses</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> enrolledCourses;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> students;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Web应用项目开发笔记整理</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="http://example.com/posts/7b8ad929.html"/>
    <id>http://example.com/posts/7b8ad929.html</id>
    <published>2022-11-30T08:53:51.000Z</published>
    <updated>2022-11-30T08:55:13.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-表（或数据库）操作语句"><a href="#1-表（或数据库）操作语句" class="headerlink" title="1.表（或数据库）操作语句"></a><strong>1.表（或数据库）操作语句</strong></h1>]]></content>
    
    
    <summary type="html">一些Java语言的笔记记录</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库的笔记</title>
    <link href="http://example.com/posts/3b20e20d.html"/>
    <id>http://example.com/posts/3b20e20d.html</id>
    <published>2022-11-28T11:23:59.000Z</published>
    <updated>2022-11-30T09:38:28.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-表（或数据库）操作语句"><a href="#1-表（或数据库）操作语句" class="headerlink" title="1.表（或数据库）操作语句"></a><strong>1.表（或数据库）操作语句</strong></h1><h2 id="1-1-查询表（或数据库）"><a href="#1-1-查询表（或数据库）" class="headerlink" title="1.1.查询表（或数据库）"></a>1.1.查询表（或数据库）</h2><ol><li><strong>获取所有可用的数据库：show databases；</strong></li><li><strong>选择数据库：use 数据库名字</strong></li><li><strong>用来显示数据库服务器的状态信息：show status；</strong></li><li><strong>显示当前数据库的所有可用的表：show tables；</strong></li><li><strong>获取表中所有列的信息：desc tableName;</strong></li></ol><h2 id="1-2-新建表（或）数据库"><a href="#1-2-新建表（或）数据库" class="headerlink" title="1.2.新建表（或）数据库"></a>1.2.新建表（或）数据库</h2><ol><li><p><strong>新建数据库： create database 数据库名字；</strong></p></li><li><p><strong>创建表可用使用create table语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLENAME(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  age <span class="type">INT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">一些MySQL数据库的笔记记录</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
  </entry>
  
</feed>
